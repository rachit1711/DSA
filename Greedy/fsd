// Simple Logic I Have Applied First Sort All the Intervals Based on there first Value And then Checking the 
// Min Point where the Two Intervals Overlapping can happen because at that Points only the Arrow Can be Shoot.
// So Taking Those Values in Mind I calculated the Minumum ValueOut of those Points and what are those points?
// Those are End Points of the Intervals.
// Increasing count only when i Got Something out of range of my min1 Points.
class Solution {
public:
    int findMinArrowShots(vector<vector<int>>& points) {
        int n = points.size();
        sort(points.begin(),points.end());
        int min1 = points[0][1];
        int cnt = 1;
        for(int i = 1 ; i < n ; i++)
        {
            if(min1 >= points[i][0])
            {
                min1 = min(min1 , points[i][1]);
            }
            else
            {
                cnt++;
                min1 = points[i][1];
            }
        }
        return cnt;
    }
};